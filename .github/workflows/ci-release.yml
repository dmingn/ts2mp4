name: CI and Release

on:
  push:
    branches: [master]
    tags: ["*"]
  pull_request:
    branches: ["**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version-file: ".python-version"
          cache: "poetry"

      - name: Check lock file consistency
        run: poetry check --lock

      - name: Install dependencies
        run: poetry sync

      - name: Install ffmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Run all checks
        run: make check

  validate_version_format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Install poetry
        run: pipx install poetry

      - name: Check version format
        run: |
          PYPROJECT_VERSION=$(poetry version --short)
          if [[ "$PYPROJECT_VERSION" =~ ^[0-9]{4}\.[0-9]{2}\.[0-9]{2}\.[0-9]+$ ]]; then
            echo "Version format is valid: $PYPROJECT_VERSION"
          else
            echo "Version format is invalid: $PYPROJECT_VERSION. Expected YYYY.MM.DD.X format."
            exit 1
          fi

  release:
    needs: [build, validate_version_format]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Install poetry
        run: pipx install poetry

      - name: Get version
        id: get_version
        run: |
          PYPROJECT_VERSION=$(poetry version --short)
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          echo "release_version=$PYPROJECT_VERSION" >> $GITHUB_OUTPUT

      - name: Check if release already exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view ${{ steps.get_version.outputs.release_version }} >/dev/null 2>&1; then
            echo "Release ${{ steps.get_version.outputs.release_version }} already exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release ${{ steps.get_version.outputs.release_version }} does not exist. Creating it."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.get_version.outputs.release_version }}" \
            --generate-notes

  propose-version-update:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Install poetry
        run: pipx install poetry

      - name: Update version if needed
        id: update_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest release version from GitHub
          LATEST_GH_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")

          TODAY=$(date +'%Y.%m.%d')

          if [[ -z "$LATEST_GH_RELEASE" ]]; then
            echo "No releases found. Starting with version $TODAY.0"
            POTENTIAL_NEW_VERSION="$TODAY.0"
          else
            echo "Latest GitHub release is $LATEST_GH_RELEASE"
            LATEST_RELEASE_DATE=$(echo $LATEST_GH_RELEASE | cut -d. -f1-3)
            LATEST_RELEASE_PATCH=$(echo $LATEST_GH_RELEASE | cut -d. -f4)

            if [[ "$LATEST_RELEASE_DATE" < "$TODAY" ]]; then
              POTENTIAL_NEW_VERSION="$TODAY.0"
            else # LATEST_RELEASE_DATE == TODAY
              NEW_PATCH=$((LATEST_RELEASE_PATCH + 1))
              POTENTIAL_NEW_VERSION="$TODAY.$NEW_PATCH"
            fi
          fi

          echo "Potential new version is $POTENTIAL_NEW_VERSION"

          CURRENT_VERSION_IN_CODE=$(poetry version --short)
          echo "Current version in pyproject.toml is $CURRENT_VERSION_IN_CODE"

          if [[ "$POTENTIAL_NEW_VERSION" != "$CURRENT_VERSION_IN_CODE" ]]; then
            echo "Version requires update. Proposing version $POTENTIAL_NEW_VERSION"
            poetry version $POTENTIAL_NEW_VERSION
            echo "version_updated=true" >> $GITHUB_OUTPUT
            echo "new_version=$POTENTIAL_NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version is already correct: $CURRENT_VERSION_IN_CODE"
            echo "version_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Version Update Branch
        id: prepare_branch
        if: steps.update_version.outputs.version_updated == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="feature/auto-version-update"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git checkout -B "$BRANCH_NAME"
          git add pyproject.toml
          git commit -m "build: update version to ${{ steps.update_version.outputs.new_version }}"
          git push --force origin "$BRANCH_NAME"

      - name: Create/Update Pull Request
        if: steps.update_version.outputs.version_updated == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_CREATING_PR }}
        run: |
          BRANCH_NAME="${{ steps.prepare_branch.outputs.branch_name }}"
          PR_STATE=$(gh pr view "$BRANCH_NAME" --json state --jq .state 2>/dev/null)

          if [[ "$PR_STATE" == "OPEN" ]]; then
            echo "An open pull request for branch '$BRANCH_NAME' already exists. It has been updated by the push."
          else
            if [[ -n "$PR_STATE" ]]; then
              echo "A pull request for branch '$BRANCH_NAME' exists but is not open (state: $PR_STATE). Creating a new one."
            else
              echo "No pull request found for branch '$BRANCH_NAME'. Creating a new one."
            fi
            gh pr create \
              --title "build: Propose version update to ${{ steps.update_version.outputs.new_version }}" \
              --body "This PR proposes an update to the project version. Merging this PR will trigger a new release." \
              --head "$BRANCH_NAME" \
              --base "master"
          fi
